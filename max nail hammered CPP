int maxCount(vector<int>& A, int K) {
    int n = A.size();
    int best = 0;
    int count = 1;

    for (int i = 0; i < n-K-1; i++) {
        if (A[i] == A[i + 1])
            count = count + 1;
        else
            count = 1;
        if (count > best)
            best = count;
    }
    int result = max(best+K, min(K+1, n));
    
    return result;
} 





def minStep(arr, k):
    n = len(arr)
    best = 0
    count = 1
    for i in range(n-k-1):
        if arr[i] == arr[i+1]:
            count += 1
        else:
            count = 1
        if count > best:
            best = count
    result = max(best+k, min(k+1, n))
    return result

if __name__ == '__main__':
    arr = [1,1,3,3,3,4,5,5,5,5]
    k = 2
    print(minStep(arr, k))
